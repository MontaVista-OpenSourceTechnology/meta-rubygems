From 0d31d12ba337eeec376f94745ba2ba6b36a788e5 Mon Sep 17 00:00:00 2001
From: Aaron Stone <aaron@serendipity.cx>
Date: Sat, 5 May 2018 23:28:42 -0700
Subject: [PATCH] Remove compatibility shims for Ruby 1.8.x and Ruby 1.9.x

Also fixes longstanding Mac OS X crash bug by using rb_thread_fd_select
in the SelectData_t::_Select() method, because on Mac OS all three
arguments to select() must be large enough to modify 'n' sockets;
rb_fd_select and rb_thread_fd_select do exactly this.

Upstream-Status: Backport
Signed-off-by: Konrad Weihmann <kweihmann@outlook.com>
---
 ext/em.cpp | 93 ++++++++++++++++++++++--------------------------------
 ext/em.h   | 73 +++---------------------------------------
 2 files changed, 41 insertions(+), 125 deletions(-)

diff --git a/ext/em.cpp b/ext/em.cpp
index 3c1f29af..11eea305 100644
--- a/ext/em.cpp
+++ b/ext/em.cpp
@@ -599,6 +599,21 @@ bool EventMachine_t::RunOnce()
 }
 
 
+#ifdef HAVE_EPOLL
+typedef struct {
+	int epfd;
+	struct epoll_event *events;
+	int maxevents;
+	int timeout;
+} epoll_args_t;
+
+static void *nogvl_epoll_wait(void *args)
+{
+	epoll_args_t *a = (epoll_args_t *)args;
+	return (void *) (uintptr_t) epoll_wait (a->epfd, a->events, a->maxevents, a->timeout);
+}
+#endif
+
 /*****************************
 EventMachine_t::_RunEpollOnce
 *****************************/
@@ -614,16 +629,7 @@ void EventMachine_t::_RunEpollOnce()
 	#ifdef BUILD_FOR_RUBY
 	int ret = 0;
 
-	#ifdef HAVE_RB_WAIT_FOR_SINGLE_FD
 	if ((ret = rb_wait_for_single_fd(epfd, RB_WAITFD_IN|RB_WAITFD_PRI, &tv)) < 1) {
-	#else
-	fd_set fdreads;
-
-	FD_ZERO(&fdreads);
-	FD_SET(epfd, &fdreads);
-
-	if ((ret = rb_thread_select(epfd + 1, &fdreads, NULL, NULL, &tv)) < 1) {
-	#endif
 		if (ret == -1) {
 			assert(errno != EINVAL);
 			assert(errno != EBADF);
@@ -631,9 +637,8 @@ void EventMachine_t::_RunEpollOnce()
 		return;
 	}
 
-	TRAP_BEG;
-	s = epoll_wait (epfd, epoll_events, MaxEvents, 0);
-	TRAP_END;
+	epoll_args_t epoll_args = { epfd, epoll_events, MaxEvents, 0 };
+	s = (uintptr_t) rb_thread_call_without_gvl (nogvl_epoll_wait, &epoll_args, RUBY_UBF_IO, 0);
 	#else
 	int duration = 0;
 	duration = duration + (tv.tv_sec * 1000);
@@ -672,6 +677,23 @@ void EventMachine_t::_RunEpollOnce()
 }
 
 
+#ifdef HAVE_KQUEUE
+typedef struct {
+	int kqfd;
+	const struct kevent *changelist;
+	int nchanges;
+	struct kevent *eventlist;
+	int nevents;
+	const struct timespec *timeout;
+} kevent_args_t;
+
+static void *nogvl_kevent(void *args)
+{
+	kevent_args_t *a = (kevent_args_t *)args;
+	return (void *) (uintptr_t) kevent (a->kqfd, a->changelist, a->nchanges, a->eventlist, a->nevents, a->timeout);
+}
+#endif
+
 /******************************
 EventMachine_t::_RunKqueueOnce
 ******************************/
@@ -691,16 +713,7 @@ void EventMachine_t::_RunKqueueOnce()
 	#ifdef BUILD_FOR_RUBY
 	int ret = 0;
 
-	#ifdef HAVE_RB_WAIT_FOR_SINGLE_FD
 	if ((ret = rb_wait_for_single_fd(kqfd, RB_WAITFD_IN|RB_WAITFD_PRI, &tv)) < 1) {
-	#else
-	fd_set fdreads;
-
-	FD_ZERO(&fdreads);
-	FD_SET(kqfd, &fdreads);
-
-	if ((ret = rb_thread_select(kqfd + 1, &fdreads, NULL, NULL, &tv)) < 1) {
-	#endif
 		if (ret == -1) {
 			assert(errno != EINVAL);
 			assert(errno != EBADF);
@@ -708,10 +721,9 @@ void EventMachine_t::_RunKqueueOnce()
 		return;
 	}
 
-	TRAP_BEG;
 	ts.tv_sec = ts.tv_nsec = 0;
-	k = kevent (kqfd, NULL, 0, Karray, MaxEvents, &ts);
-	TRAP_END;
+	kevent_args_t kevent_args = { kqfd, NULL, 0, Karray, MaxEvents, &ts };
+	k = (uintptr_t) rb_thread_call_without_gvl (nogvl_kevent, &kevent_args, RUBY_UBF_IO, 0);
 	#else
 	k = kevent (kqfd, NULL, 0, Karray, MaxEvents, &ts);
 	#endif
@@ -750,7 +762,6 @@ void EventMachine_t::_RunKqueueOnce()
 		++ke;
 	}
 
-	// TODO, replace this with rb_thread_blocking_region for 1.9 builds.
 	#ifdef BUILD_FOR_RUBY
 	if (!rb_thread_alone()) {
 		rb_thread_schedule();
@@ -903,39 +914,14 @@ SelectData_t::~SelectData_t()
 	rb_fd_term (&fderrors);
 }
 
-#ifdef BUILD_FOR_RUBY
-/*****************
-_SelectDataSelect
-*****************/
-
-#if defined(HAVE_RB_THREAD_BLOCKING_REGION) || defined(HAVE_RB_THREAD_CALL_WITHOUT_GVL)
-static VALUE _SelectDataSelect (void *v)
-{
-	SelectData_t *sd = (SelectData_t*)v;
-	sd->nSockets = rb_fd_select (sd->maxsocket+1, &(sd->fdreads), &(sd->fdwrites), &(sd->fderrors), &(sd->tv));
-	return Qnil;
-}
-#endif
-
 /*********************
 SelectData_t::_Select
 *********************/
 
 int SelectData_t::_Select()
 {
-	#if defined(HAVE_RB_THREAD_CALL_WITHOUT_GVL)
-	// added in ruby 1.9.3
-	rb_thread_call_without_gvl ((void *(*)(void *))_SelectDataSelect, (void*)this, RUBY_UBF_IO, 0);
-	return nSockets;
-	#elif defined(HAVE_TBR)
-	// added in ruby 1.9.1, deprecated in ruby 2.0.0
-	rb_thread_blocking_region (_SelectDataSelect, (void*)this, RUBY_UBF_IO, 0);
-	return nSockets;
-	#else
-	return EmSelect (maxsocket+1, &fdreads, &fdwrites, &fderrors, &tv);
-	#endif
+	return EmSelect (maxsocket + 1, &fdreads, &fdwrites, &fderrors, &tv);
 }
-#endif
 
 void SelectData_t::_Clear()
 {
@@ -1001,13 +987,8 @@ void EventMachine_t::_RunSelectOnce()
 
 
 	{ // read and write the sockets
-		//timeval tv = {1, 0}; // Solaris fails if the microseconds member is >= 1000000.
-		//timeval tv = Quantum;
 		SelectData->tv = _TimeTilNextEvent();
 		int s = SelectData->_Select();
-		//rb_thread_blocking_region(xxx,(void*)&SelectData,RUBY_UBF_IO,0);
-		//int s = EmSelect (SelectData.maxsocket+1, &(SelectData.fdreads), &(SelectData.fdwrites), NULL, &(SelectData.tv));
-		//int s = SelectData.nSockets;
 		if (s > 0) {
 			/* Changed 01Jun07. We used to handle the Loop-breaker right here.
 			 * Now we do it AFTER all the regular descriptors. There's an
diff --git a/ext/em.h b/ext/em.h
index 3b11ea01..ab641135 100644
--- a/ext/em.h
+++ b/ext/em.h
@@ -22,78 +22,14 @@ See the file COPYING for complete licensing information.
 
 #ifdef BUILD_FOR_RUBY
   #include <ruby.h>
-  #ifdef HAVE_RB_THREAD_FD_SELECT
-    #define EmSelect rb_thread_fd_select
-  #else
-    // ruby 1.9.1 and below
-    #define EmSelect rb_thread_select
-  #endif
-
-  #ifdef HAVE_RB_THREAD_CALL_WITHOUT_GVL
-   #include <ruby/thread.h>
-  #endif
-
-  #ifdef HAVE_RB_WAIT_FOR_SINGLE_FD
-    #include <ruby/io.h>
-  #endif
-
-  #if defined(HAVE_RB_TRAP_IMMEDIATE)
-    #include <rubysig.h>
-  #elif defined(HAVE_RB_ENABLE_INTERRUPT)
-    extern "C" {
-      void rb_enable_interrupt(void);
-      void rb_disable_interrupt(void);
-    }
-
-    #define TRAP_BEG rb_enable_interrupt()
-    #define TRAP_END do { rb_disable_interrupt(); rb_thread_check_ints(); } while(0)
-  #else
-    #define TRAP_BEG
-    #define TRAP_END
-  #endif
-
-  // 1.9.0 compat
-  #ifndef RUBY_UBF_IO
-    #define RUBY_UBF_IO RB_UBF_DFL
-  #endif
-  #ifndef RSTRING_PTR
-    #define RSTRING_PTR(str) RSTRING(str)->ptr
-  #endif
-  #ifndef RSTRING_LEN
-    #define RSTRING_LEN(str) RSTRING(str)->len
-  #endif
-  #ifndef RSTRING_LENINT
-    #define RSTRING_LENINT(str) RSTRING_LEN(str)
-  #endif
+  #include <ruby/thread.h>
+  #include <ruby/io.h>
+
+  #define EmSelect rb_thread_fd_select
 #else
   #define EmSelect select
 #endif
 
-#if !defined(HAVE_TYPE_RB_FDSET_T)
-#define fd_check(n) (((n) < FD_SETSIZE) ? 1 : 0*fprintf(stderr, "fd %d too large for select\n", (n)))
-// These definitions are cribbed from include/ruby/intern.h in Ruby 1.9.3,
-// with this change: any macros that read or write the nth element of an
-// fdset first call fd_check to make sure n is in bounds.
-typedef fd_set rb_fdset_t;
-#define rb_fd_zero(f) FD_ZERO(f)
-#define rb_fd_set(n, f) do { if (fd_check(n)) FD_SET((n), (f)); } while(0)
-#define rb_fd_clr(n, f) do { if (fd_check(n)) FD_CLR((n), (f)); } while(0)
-#define rb_fd_isset(n, f) (fd_check(n) ? FD_ISSET((n), (f)) : 0)
-#define rb_fd_copy(d, s, n) (*(d) = *(s))
-#define rb_fd_dup(d, s) (*(d) = *(s))
-#define rb_fd_resize(n, f)  ((void)(f))
-#define rb_fd_ptr(f)  (f)
-#define rb_fd_init(f) FD_ZERO(f)
-#define rb_fd_init_copy(d, s) (*(d) = *(s))
-#define rb_fd_term(f) ((void)(f))
-#define rb_fd_max(f)  FD_SETSIZE
-#define rb_fd_select(n, rfds, wfds, efds, timeout)  \
-  select(fd_check((n)-1) ? (n) : FD_SETSIZE, (rfds), (wfds), (efds), (timeout))
-#define rb_thread_fd_select(n, rfds, wfds, efds, timeout)  \
-  rb_thread_select(fd_check((n)-1) ? (n) : FD_SETSIZE, (rfds), (wfds), (efds), (timeout))
-#endif
-
-
 // This Solaris fix is adapted from eval_intern.h in Ruby 1.9.3:
 // Solaris sys/select.h switches select to select_large_fdset to support larger
 // file descriptors if FD_SETSIZE is larger than 1024 on 32bit environment.
@@ -302,7 +238,6 @@ struct SelectData_t
 	rb_fdset_t fdwrites;
 	rb_fdset_t fderrors;
 	timeval tv;
-	int nSockets;
 };
 
 #endif // __EventMachine__H_
